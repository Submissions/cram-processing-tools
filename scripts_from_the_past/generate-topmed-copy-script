#!/usr/bin/env python3

"""Generate the copy-with-rename script that stages TOPMed files."""

import argparse
from functools import partial
import logging
import sys

import wh_lib


PROLOG = '''#/usr/bin/env bash

DST="$1"

if [ -f topmed_cvcp_init.sh ]; then
    . topmed_cvcp_init.sh
fi
'''

logger = logging.getLogger(__name__)


def main():
    args = parse_args()
    config_logging(args)
    run(args)
    logging.shutdown()


def parse_args():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('worklist_file_path')
    parser.add_argument('-v', '--verbose', action='store_true')
    args = parser.parse_args()
    return args


def config_logging(args):
    global logger
    level = logging.DEBUG if args.verbose else logging.INFO
    logging.basicConfig(level=level)
    logger = logging.getLogger('gen-topmed-copy')


def run(args):
    logger.info('args: %r', args)
    worklist = wh_lib.parse_excel_records(args.worklist_file_path)
    batch_dir, project_dir = extract_batch_info(worklist)
    script_name = '{}.sh'.format(batch_dir)
    new_dir = '{0}/{1}'.format(project_dir, batch_dir)
    with open(script_name, 'w') as fout:
        output_copy_script(fout, new_dir, worklist)


def extract_batch_info(worklist):
    """Return batch_dir & project_dir, which must be the same for all rows."""
    batch_dirs = set(r.batch for r in worklist)
    project_dirs = set(r.hgsc_xfer_subdir for r in worklist)
    assert len(batch_dirs) == 1, (
        'batch must be the same for all BAMs in worklist'
    )
    assert len(project_dirs) == 1, (
        'hgsc_xfer_subdir must be the same for all BAMs in worklist'
    )
    batch_dir = list(batch_dirs)[0]
    project_dir = list(project_dirs)[0]
    return batch_dir, project_dir


def output_copy_script(fout, new_dir, worklist):
    pr = partial(print, file=fout)
    pr(PROLOG)
    pr('mkdir -p "$DST/{}"'.format(new_dir))
    pr()
    for r in worklist:
        pr(
            'cvcp $TOPMED_CVCP_OPTS "{}" "$DST/{}/{}"'.format(
                r.bam_path, new_dir, r.new_bam_name
            )
        )


if __name__ == '__main__':
    main()
